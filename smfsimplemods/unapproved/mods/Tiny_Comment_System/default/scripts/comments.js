var csAction = smf_scripturl + '?action=comment';var csTemplate =    '<form>'    + '<textarea class="comment_field" name="comment_body"></textarea>'    + '<span class="char_left">{char_left_text}</span><span class="char_counter" name="countdown">{counter}</span>'    + '<div class="sent_comment_action"><input type="submit" value="{sent_lang}" />'    + '</form>';var settings;jQuery.fn.csCharCounter = function(){  if (settings.limit_text != 0){		this.live('keydown', function(){			limitText(tcs(this));		});		this.live('keyup', function(){			limitText(tcs(this));		});	}}jQuery.fn.csAddComment = function(options) {    settings = tcs.extend( {    }, options);    this.live('click', function(e){        e.preventDefault();        csBuildForm(tcs(this));    });    return this;};jQuery.fn.csUndoComment = function() {    this.live('click', function(e){        e.preventDefault();        csRemoveForm(tcs(this));    });    return this;};jQuery.fn.csSendComment = function() {    this.live('click', function(e){        e.preventDefault();        csDoPost(tcs(this));    });    return this;};jQuery.fn.csDeleteComment = function() {    this.live('click', function(e){        e.preventDefault();        csDoDelete(tcs(this));    });    return this;};function csBuildForm(addLink){    addLink.closest('.comments_container').find('.comment_error').fadeOut();    csTemplate = csTemplate.replace('{sent_lang}', settings.post_text);	if (settings.limit_text != 0){		csTemplate = csTemplate.replace('{counter}', settings.limit_text);		csTemplate = csTemplate.replace('{char_left_text}', settings.char_left_text);	}	else{		csTemplate = csTemplate.replace('{counter}', '');		csTemplate = csTemplate.replace('{char_left_text}', '');	}    addLink.removeClass('new_comment_action').addClass('undo_comment_action').text(settings.undo_text);    var comment_form = addLink.parent().children('.comment_form');    comment_form.append(csTemplate).fadeIn('slow');}function csRemoveForm(undoButton){    undoButton.closest('.comments_container').find('.comment_error').fadeOut();    undoButton.removeClass('undo_comment_action').addClass('new_comment_action').text(settings.add_text);    undoButton.parent().children('.comment_form').empty();}jQuery.fn.csShowMore = function() {    this.live('click', function(e){        e.preventDefault();        var limit = parseInt(tcs(this).attr('name')); //comentarios a mostrar        var begin = parseInt(tcs(this).attr('rel')); //comentarios iniciales        var comments = tcs(this).closest('.comments_container').find('.comments');        var end = begin + limit;        for (var i = begin; i < end; i ++){            comments.children('.count_' + i).fadeIn("slow").removeClass('tcs_hidden');        }        if (comments.children('.tcs_hidden').size() == 0)            tcs(this).hide();        tcs(this).attr('rel', end );    });    return this;};function csDoPost(button){    var comment = button.parent().children('.comment_field').val();    var message = button.closest('.replay_comment_container').find('.message_to_comment').val();    var container = button.closest('.comments_container').find('.comments');    var undoButton = button.closest('.comments_container').find('.undo_comment_action');    var request = tcs.ajax({        url: csAction,        type: "POST",        data: {"comment" : comment, "message" : message, "topic" : settings.topic},        dataType: "json"    });    request.done(function(msg) {        var errorElement = button.closest('.comments_container').find('.comment_error');		if (msg.error == ''){			var template = settings.comment_template;			template = template.replace('[status]', 'tcs_actived');			template = template.replace('[delete]', msg.delete_url);			template = template.replace('[date]', msg.date);			template = template.replace('[count]', 0);			template = template.replace('[group_color]', msg.group_color);			template = template.replace('[member_id]', msg.member_id);			template = template.replace('[avatar]', msg.avatar);			template = template.replace('[body]', msg.body);			template = template.replace('[id]', msg.id);			template = template.replace('[member_name]', msg.member_name);			container.append( template );			csRemoveForm(undoButton);            errorElement.fadeOut();		}		else{			errorElement.html(msg.error).fadeIn();		}    });}function csDoDelete(link){    var comment = link.attr('name');    var request = tcs.ajax({        url: smf_scripturl + '?action=comment;sa=delete',        type: "POST",        data: {"id_comment" : comment},        dataType: "html"    });    request.done(function(msg) {      var comment_container = link.closest('.comments_container').find('#comment_' + comment);      comment_container.fadeOut("slow");    });}function limitText(textarea) {    var counterElement = textarea.parent().children('.char_counter');    var limit = parseInt(counterElement.html());    var total = textarea.val().length;    if (total <= settings.limit_text){        var porcent = (total / settings.limit_text) * 100;        if ( porcent > 90)            counterElement.removeClass("normal").removeClass("warning").addClass("final");        else if ( porcent > 70)            counterElement.removeClass("normal").removeClass("final").addClass("warning");        else            counterElement.removeClass("final").removeClass("warning").addClass("normal");        counterElement.html(settings.limit_text - textarea.val().length);    }    else{        textarea.val(textarea.val().substring(0, settings.limit_text));    }}