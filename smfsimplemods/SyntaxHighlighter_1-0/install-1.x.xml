<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
	<id>manix_10:SyntaxHighlighter</id>
	<version>1.0</version>

	<!-- Themes/default/index.template.php -->
	<file name="$themedir/index.template.php">
		<operation>
			<search position="before"><![CDATA[<title>', $context['page_title'], '</title>';]]></search>
			<add><![CDATA[
	
	// Syntax Highlighting javascript...	
	syntaxHighlightingJavascript();

]]></add>
		</operation>
	</file>
	
	
	<!-- Sources/Subs.php -->
	<file name="$sourcedir/Subs.php">
		<operation>
			<search position="after"><![CDATA[// This is the only template included in the sources...
function template_rawdata()
{
	global $context;

	echo $context['raw_data'];
}]]></search>
			<add><![CDATA[// Syntax Highlighting javascript...
function syntaxHighlightingJavascript()
{
	global $settings;
	
	$brushes = array('shBrushCpp','shBrushCSharp','shBrushCss','shBrushDelphi','shBrushJava','shBrushJScript','shBrushPhp', 'shBrushPython','shBrushRuby','shBrushSql','shBrushVb','shBrushXml');

	echo '
	<link rel="stylesheet" type="text/css" href="', $settings['theme_url'], '/SyntaxHighlighter/css/SyntaxHighlighter.css" />
	<script language="javascript" src="', $settings['theme_url'], '/SyntaxHighlighter/js/shCore.js"></script>';
	
	foreach ($brushes as $b){
		echo '<script language="javascript" src="', $settings['theme_url'], '/SyntaxHighlighter/js/', $b, '.js"></script>';
	}
	
	echo '
	<script language="javascript">
		window.onload = function () {

			dp.SyntaxHighlighter.ClipboardSwf = \'', $settings['theme_url'], '/SyntaxHighlighter/js/clipboard.swf\';
			dp.SyntaxHighlighter.BloggerMode();
			dp.SyntaxHighlighter.HighlightAll(\'code\');
		}
	</script>';
	
}


]]></add>
		</operation>
		
		<operation>
			<search position="replace" whitespace="loose"><![CDATA[
			array(
				'tag' => 'code',
				'type' => 'unparsed_equals_content',
				'content' => '<div class="codeheader">' . $txt['smf238'] . ': ($2)</div><div class="code">' . ($context['browser']['is_gecko'] ? '<pre style="margin-top: 0; display: inline;">$1</pre>' : '$1') . '</div>',
				// !!! Maybe this can be simplified?
				'validate' => isset($disabled['code']) ? null : create_function('&$tag, &$data, $disabled', '
					global $context;

					if (!isset($disabled[\'code\']))
					{
						$php_parts = preg_split(\'~(&lt;\?php|\?&gt;)~\', $data[0], -1, PREG_SPLIT_DELIM_CAPTURE);

						for ($php_i = 0, $php_n = count($php_parts); $php_i < $php_n; $php_i++)
						{
							// Do PHP code coloring?
							if ($php_parts[$php_i] != \'&lt;?php\')
								continue;

							$php_string = \'\';
							while ($php_i + 1 < count($php_parts) && $php_parts[$php_i] != \'?&gt;\')
							{
								$php_string .= $php_parts[$php_i];
								$php_parts[$php_i++] = \'\';
							}
							$php_parts[$php_i] = highlight_php_code($php_string . $php_parts[$php_i]);
						}

						// Fix the PHP code stuff...
						$data[0] = str_replace("<pre style=\"display: inline;\">\t</pre>", "\t", implode(\'\', $php_parts));

						// Older browsers are annoying, aren\'t they?
						if ($context[\'browser\'][\'is_ie4\'] || $context[\'browser\'][\'is_ie5\'] || $context[\'browser\'][\'is_ie5.5\'])
							$data = str_replace("\t", "<pre style=\"display: inline;\">\t</pre>", $data);
						elseif (!$context[\'browser\'][\'is_gecko\'])
							$data = str_replace("\t", "<span style=\"white-space: pre;\">\t</span>", $data);
					}'),
				'block_level' => true,
			),
]]></search>
			<add><![CDATA[
			
			array(
				'tag' => 'code',
            	'type' => 'unparsed_equals_content',
            	'test' => '[A-Za-z0-9_,\-\s]+?\]',
            	'validate' =>  create_function('&$tag, &$data, $disabled', '
               $data[0] = parse_bbc($data[0], ' . ($smileys ? 'true' : 'false') . ', \'' . $cache_id . '\');
			   global $txt;
               $tag[\'content\'] = "<div class=\"codeheader\">" . $txt[\'smf238\'] . ": (" . $data[1] . ") </div><pre name=\"code\" class=\"" . $data[1] . "\">" . $data[0] . "</pre>";
            	'),
			),
]]></add>
		</operation>
		
	</file>
	
	
	
		
</modification>