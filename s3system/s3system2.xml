<?xml version="1.0"?>
<!DOCTYPE modification SYSTEM "http://www.simplemachines.org/xml/modification">
<modification xmlns="http://www.simplemachines.org/xml/modification" xmlns:smf="http://www.simplemachines.org/">
<id>vbgamer45:s3system</id>
<version>1.0</version>
<file name="$languagedir/Modifications.english.php">
	<operation>
		<search position="after"><![CDATA[?>]]></search>
		<add><![CDATA[
// Begin S3 System
$txt['amazon_s3'] = 'Amazon S3';
$txt['amazon_s3_note'] = 'Amazon S3 is another way to store files/serve requests to learn more visit <a href="https://aws.amazon.com/s3/" target="_blank">https://aws.amazon.com/s3/</a>';
$txt['s3_enabled'] = 'Enable Amazon S3 for Storage';
$txt['s3_delete_local'] = 'Delete the local file after uploaded successfully to S3';
$txt['s3_thumbnails'] = 'Copy/display attachment thumbnails using S3. Images may load slower';
$txt['s3_access_key'] = 'AWS Access Key';
$txt['s3_secret_access_key'] = 'AWS Secret Key';
$txt['s3_bucket'] = 'S3 Bucket';
$txt['s3_region'] = 'S3 Region';
$txt['s3_domain'] = 'Optional -Custom AWS CNAME domain';
$txt['s3_domain_note'] = 'Enter CNAME with https:// or http://.  Also your CNAME must match your bucket name exactly!  Example: bucket name mybucket.domain.com  then your cname should be https://mybucket.domain.com';
$txt['s3_cron_items'] = 'Number of items to process per cron job';
$txt['s3_sycned'] = 'Synced';
$txt['s3_no'] = 'No';

$txt['error_bad_access_key'] = 'Invalid AWS S3 Access Key';
$txt['error_bad_secret_access_key'] = 'Invalid AWS S3 Secret Key';
$txt['s3_cronjob'] = 'Cron Job';
$txt['s3_cronurl'] = 'Cron Path';
$txt['s3_cronurl_note'] = '<strong>Required!</strong> Setup a cron job with file path below to execute php code. Have it run at least once an hour or every 15 minutes for faster uploads to S3';

// END S3 System
]]></add>
	</operation>
</file>

<file name="$languagedir/Modifications.english-utf8.php" error="skip">
	<operation>
		<search position="after"><![CDATA[?>]]></search>
		<add><![CDATA[
// Begin S3 System
$txt['amazon_s3'] = 'Amazon S3';
$txt['amazon_s3_note'] = 'Amazon S3 is another way to store files/serve requests to learn more visit <a href="https://aws.amazon.com/s3/" target="_blank">https://aws.amazon.com/s3/</a>';
$txt['s3_enabled'] = 'Enable Amazon S3 for Storage';
$txt['s3_delete_local'] = 'Delete the local file after uploaded successfully to S3';
$txt['s3_thumbnails'] = 'Copy/display attachment thumbnails using S3. Images may load slower';
$txt['s3_access_key'] = 'AWS Access Key';
$txt['s3_secret_access_key'] = 'AWS Secret Key';
$txt['s3_bucket'] = 'S3 Bucket';
$txt['s3_region'] = 'S3 Region';
$txt['s3_domain'] = 'Optional -Custom AWS CNAME domain';
$txt['s3_domain_note'] = 'Enter CNAME with https:// or http://.  Also your CNAME must match your bucket name exactly!  Example: bucket name mybucket.domain.com  then your cname should be https://mybucket.domain.com';
$txt['s3_cron_items'] = 'Number of items to process per cron job';
$txt['s3_sycned'] = 'Synced';
$txt['s3_no'] = 'No';

$txt['error_bad_access_key'] = 'Invalid AWS S3 Access Key';
$txt['error_bad_secret_access_key'] = 'Invalid AWS S3 Secret Key';
$txt['s3_cronjob'] = 'Cron Job';
$txt['s3_cronurl'] = 'Cron Path';
$txt['s3_cronurl_note'] = '<strong>Required!</strong> Setup a cron job with file path below to execute php code. Have it run at least once an hour or every 15 minutes for faster uploads to S3';

// END S3 System
]]></add>
	</operation>
</file>

<file name="$sourcedir/ManageSettings.php">
	<operation>
		<search position="before"><![CDATA['profileedit' => 'EditCustomProfiles',]]></search>
		<add><![CDATA[
		's3' => 'ModifyS3Settings',
]]></add>
	</operation>
	<operation>
		<search position="replace"><![CDATA['profile' => array(
				'description' => $txt['custom_profile_desc'],
			),]]></search>
		<add><![CDATA['s3' => array(
				'description' => $txt['amazon_s3_note'],
			),]]></add>
	</operation>

	<operation>
		<search position="replace"><![CDATA[function ModifyKarmaSettings($return_config = false)]]></search>
		<add><![CDATA[

function ModifyS3Settings($return_config = false)
{
	global $txt, $scripturl, $context, $settings, $sc, $smcFunc, $boarddir;

	$txt['s3_cronurl_note'] .= "<br>" . $txt['s3_cronurl'] . ': ' .  $boarddir . '/s3cron.php';

	$config_vars = array(
			array('check', 's3_enabled'),
			array('text', 's3_access_key'),
			array('text', 's3_secret_access_key'),
			array('text', 's3_bucket'),
			array('text', 's3_region'),
			array('text', 's3_domain', 'subtext' =>  $txt['s3_domain_note']),
			array('check', 's3_thumbnails'),
			array('check', 's3_delete_local'),

			array('int', 's3_cron_items'),
			array('title', 's3_cronjob'),
			array('desc', 's3_cronurl_note'),
	);

	// Saving?
	if (isset($_GET['save']))
	{

	// Get the settings
	$s3_enabled = isset($_REQUEST['s3_enabled']) ? 1 : 0;
	$s3_delete_local =  isset($_REQUEST['s3_delete_local']) ? 1 : 0;
	$s3_access_key = $smcFunc['htmlspecialchars'](trim($_REQUEST['s3_access_key']), ENT_QUOTES);
	$s3_secret_access_key = $smcFunc['htmlspecialchars'](trim($_REQUEST['s3_secret_access_key']), ENT_QUOTES);
	$s3_bucket = $smcFunc['htmlspecialchars'](trim($_REQUEST['s3_bucket']), ENT_QUOTES);
	$s3_region = $smcFunc['htmlspecialchars'](trim($_REQUEST['s3_region']), ENT_QUOTES);
	$s3_domain = $smcFunc['htmlspecialchars'](trim($_REQUEST['s3_domain']), ENT_QUOTES);

	$_POST['s3_access_key'] = $s3_access_key;
	$_POST['s3_secret_access_key'] = $s3_secret_access_key;
	$_POST['s3_bucket'] = $s3_bucket;
	$_POST['s3_region'] = $s3_region;
	$_POST['s3_domain'] = $s3_domain;

	if (empty($s3_bucket) || empty($s3_region) || empty($s3_access_key) || empty($s3_secret_access_key))
		$s3_enabled = 0;

	// Check keys and settings are valid
	if ($s3_enabled == 1)
	{
		if (!preg_match('/[A-Z0-9]{20}/', $s3_access_key))
			fatal_error($txt['error_bad_access_key'],false);

		if (!preg_match('/[A-Za-z0-9\/+=]{40}/', $s3_secret_access_key))
			fatal_error($txt['error_bad_secret_access_key'],false);

		require_once dirname(__FILE__) . '/s3system/vendor/autoload.php';

		// Check the settings
		try
		{
			$s3_client = new \Aws\S3\S3Client([
						'credentials' => [
							'key'    => $s3_access_key,
							'secret' => $s3_secret_access_key,
						],
						'http'        => [
							'verify' => false,
						],
						'region'      => $s3_region,
						'version'     => 'latest',
					]);
					// Upload Test File
					$s3_client->upload($s3_bucket, 'dprocheck.txt', 'Does This Work?');
					// Delete the file
					$s3_client->deleteObject([
						'Bucket' => $s3_bucket,
						'Key'    => 'dprocheck.txt',
					]);
				}
				catch (\Aws\S3\Exception\S3Exception $e)
				{
					fatal_error($e->getMessage(),false);
				}
	}




		saveDBSettings($config_vars);
		redirectexit('action=admin;area=featuresettings;sa=s3');
	}

	$context['post_url'] = $scripturl . '?action=admin;area=featuresettings;save;sa=s3';
	$context['settings_title'] = $txt['amazon_s3'];

	prepareDBSettingContext($config_vars);
}

function ModifyKarmaSettings($return_config = false)]]></add>
	</operation>
</file>

<file name="$sourcedir/Subs.php">
		<operation>
			<search position="end"></search>
			<add><![CDATA[

function DeleteS3File($filename)
{
	global $modSettings;
	require_once dirname(__FILE__) . '/s3system/vendor/autoload.php';

		try
		{			$s3_client = new \Aws\S3\S3Client([
						'credentials' => [
							'key'    => $modSettings['s3_access_key'],
							'secret' => $modSettings['s3_secret_access_key'],
						],
						'http'        => [
							'verify' => false,
						],
						'region'      => $modSettings['s3_region'],
						'version'     => 'latest',
					]);

					// Delete the file
					$s3_client->deleteObject([
						'Bucket' => $modSettings['s3_bucket'],
						'Key'    => $filename,
					]);

					}
				catch (\Aws\S3\Exception\S3Exception $e)
				{
					log_error($e->getMessage());
				}

}

function S3GetSignedUrl($filename, $orginalFilename, $image = 0)
{
	global $modSettings;
	require_once dirname(__FILE__) . '/s3system/vendor/autoload.php';

		try
		{
				if (empty($modSettings['s3_domain']))
					$s3_client = new \Aws\S3\S3Client([
						'credentials' => [
							'key'    => $modSettings['s3_access_key'],
							'secret' => $modSettings['s3_secret_access_key'],
						],
						'http'        => [
							'verify' => false,
						],
						'region'      => $modSettings['s3_region'],
						'version'     => 'latest',
					]);
				else
					$s3_client = new \Aws\S3\S3Client([
						'credentials' => [
							'key'    => $modSettings['s3_access_key'],
							'secret' => $modSettings['s3_secret_access_key'],
						],
						'http'        => [
							'verify' => false,
						],
						'region'      => $modSettings['s3_region'],
						'version'     => 'latest',
						'signature_version' => 'v4',
						'endpoint' => $modSettings['s3_domain'],
						'bucket_endpoint' => true,
					]);





					// public url
				 	//$fileUrl =	$s3_client->getObjectUrl($modSettings['s3_bucket'],$filename);
					if ($image == 0)
					{
						$cmd = $s3_client->getCommand('GetObject', [
						'Bucket' => $modSettings['s3_bucket'],
						'Key' => $filename,
						'ResponseContentType' => 'application/octet-stream',
						'ResponseContentDisposition'    => 'attachment; filename="' . $orginalFilename  .'"'
					]);

					}
					else
					{
						$extension = substr(strrchr($orginalFilename, '.'), 1);
						$extension = str_replace("_thumb","",$extension);

						$cmd = $s3_client->getCommand('GetObject', [
						'Bucket' => $modSettings['s3_bucket'],
						'Key' => $filename,
						'ResponseContentType' => 'image/' . $extension,
					]);

					}

					$request = $s3_client->createPresignedRequest($cmd, '+60 minutes');

					// Get the actual presigned-url
					$presignedUrl = (string)$request->getUri();



					return $presignedUrl;

					}
				catch (\Aws\S3\Exception\S3Exception $e)
				{
					log_error($e->getMessage());
				}

}
]]></add>
	</operation>

</file>

<file name="$sourcedir/ManageAttachments.php">
	<operation>
		<search position="replace"><![CDATA[// Get all the attachment names and id_msg's.
	$request = $smcFunc['db_query']('', '
		SELECT
			a.id_folder, a.filename, a.file_hash, a.attachment_type, a.id_attach, a.id_member' . ($query_type == 'messages' ? ', m.id_msg' : ', a.id_msg') . ',
			thumb.id_folder AS thumb_folder, IFNULL(thumb.id_attach, 0) AS id_thumb, thumb.filename AS thumb_filename, thumb.file_hash AS thumb_file_hash, thumb_parent.id_attach AS id_parent
		FROM {db_prefix}attachments AS a' .($query_type == 'members' ? '
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = a.id_member)' : ($query_type == 'messages' ? '
			INNER JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg)' : '')) . '
			LEFT JOIN {db_prefix}attachments AS thumb ON (thumb.id_attach = a.id_thumb)
			LEFT JOIN {db_prefix}attachments AS thumb_parent ON (thumb.attachment_type = {int:thumb_attachment_type} AND thumb_parent.id_thumb = a.id_attach)
		WHERE ' . $condition,
		$query_parameter
	);
	while ($row = $smcFunc['db_fetch_assoc']($request))
	{
		// Figure out the "encrypted" filename and unlink it ;).
		if ($row['attachment_type'] == 1)
			@unlink($modSettings['custom_avatar_dir'] . '/' . $row['filename']);
		else
		{
			$filename = getAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);
			@unlink($filename);

			// If this was a thumb, the parent attachment should know about it.
			if (!empty($row['id_parent']))
				$parents[] = $row['id_parent'];

			// If this attachments has a thumb, remove it as well.
			if (!empty($row['id_thumb']) && $autoThumbRemoval)
			{
				$thumb_filename = getAttachmentFilename($row['thumb_filename'], $row['id_thumb'], $row['thumb_folder'], false, $row['thumb_file_hash']);
				@unlink($thumb_filename);
				$attach[] = $row['id_thumb'];
			}
		}

		// Make a list.
		if ($return_affected_messages && empty($row['attachment_type']))
			$msgs[] = $row['id_msg'];
		$attach[] = $row['id_attach'];
	}
	$smcFunc['db_free_result']($request);]]></search>
		<add><![CDATA[// Get all the attachment names and id_msg's.
	$request = $smcFunc['db_query']('', '
		SELECT
			a.id_folder, a.filename, a.file_hash, a.s3, a.attachment_type, a.id_attach, a.id_member' . ($query_type == 'messages' ? ', m.id_msg' : ', a.id_msg') . ',
			thumb.id_folder AS thumb_folder, IFNULL(thumb.id_attach, 0) AS id_thumb, thumb.filename AS thumb_filename, thumb.s3 as thumb_s3, thumb.file_hash AS thumb_file_hash, thumb_parent.id_attach AS id_parent
		FROM {db_prefix}attachments AS a' .($query_type == 'members' ? '
			INNER JOIN {db_prefix}members AS mem ON (mem.id_member = a.id_member)' : ($query_type == 'messages' ? '
			INNER JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg)' : '')) . '
			LEFT JOIN {db_prefix}attachments AS thumb ON (thumb.id_attach = a.id_thumb)
			LEFT JOIN {db_prefix}attachments AS thumb_parent ON (thumb.attachment_type = {int:thumb_attachment_type} AND thumb_parent.id_thumb = a.id_attach)
		WHERE ' . $condition,
		$query_parameter
	);
	while ($row = $smcFunc['db_fetch_assoc']($request))
	{
		// Figure out the "encrypted" filename and unlink it ;).
		if ($row['attachment_type'] == 1)
			@unlink($modSettings['custom_avatar_dir'] . '/' . $row['filename']);
		else
		{
			$filename = getAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);

			// s3 check
			if (empty($row['s3']))
				@unlink($filename);
			else
			{
				$s3filename = 	$row['file_hash'];
				if (empty($s3filename))
					$s3filename = $row['filename'];

				DeleteS3File($s3filename);
			}

			// If this was a thumb, the parent attachment should know about it.
			if (!empty($row['id_parent']))
				$parents[] = $row['id_parent'];

			// If this attachments has a thumb, remove it as well.
			if (!empty($row['id_thumb']) && $autoThumbRemoval)
			{
				$thumb_filename = getAttachmentFilename($row['thumb_filename'], $row['id_thumb'], $row['thumb_folder'], false, $row['thumb_file_hash']);
				// s3 check
				if (empty($row['thumb_s3']))
					@unlink($thumb_filename);
				else
			{
				$s3filename = 	$row['thumb_file_hash'];
				if (empty($s3filename))
					$s3filename = $row['thumb_filename'];

				DeleteS3File($s3filename);
			}




				$attach[] = $row['id_thumb'];
			}
		}

		// Make a list.
		if ($return_affected_messages && empty($row['attachment_type']))
			$msgs[] = $row['id_msg'];
		$attach[] = $row['id_attach'];
	}
	$smcFunc['db_free_result']($request);]]></add>
	</operation>

	<operation>
		<search position="replace"><![CDATA[SELECT thumb.id_attach, thumb.id_folder, thumb.filename, thumb.file_hash
				FROM {db_prefix}attachments AS thumb
					LEFT JOIN {db_prefix}attachments AS tparent ON (tparent.id_thumb = thumb.id_attach)
				WHERE thumb.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND thumb.attachment_type = {int:thumbnail}
					AND tparent.id_attach IS NULL]]></search>
		<add><![CDATA[SELECT thumb.id_attach, thumb.id_folder, thumb.filename, thumb.file_hash
				FROM {db_prefix}attachments AS thumb
					LEFT JOIN {db_prefix}attachments AS tparent ON (tparent.id_thumb = thumb.id_attach)
				WHERE thumb.s3 != 1 AND thumb.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND thumb.attachment_type = {int:thumbnail}
					AND tparent.id_attach IS NULL]]></add>
	</operation>


	<operation>
		<search position="replace"><![CDATA[WHERE id_attach BETWEEN {int:substep} AND {int:substep} + 249]]></search>
		<add><![CDATA[WHERE s3 != 1 AND id_attach BETWEEN {int:substep} AND {int:substep} + 249]]></add>
	</operation>

	<operation>
		<search position="before"><![CDATA[			'downloads' => array(
				'header' => array(
					'value' => $txt['downloads'],
				),
				'data' => array(
					'function' => function($rowData) use ($txt)
					{
						return comma_format($rowData['downloads']);
					},
					'class' => 'windowbg',
				),
				'sort' => array(
					'default' => 'a.downloads',
					'reverse' => 'a.downloads DESC',
				),
			),]]></search>
		<add><![CDATA[			's3' => array(
				'header' => array(
					'value' => $txt['amazon_s3'],
				),
				'data' => array(
					'function' => function($rowData) use ($txt, $context)
					{
						if ($context['browse_type'] === 'avatars')
							return "";


						if ($rowData['s3'] == 1)
							return $txt['s3_sycned'];
						else
							return $txt['s3_no'];

					},
					'class' => 'windowbg',
				),
			),]]></add>
	</operation>

	<operation>
		<search position="replace"><![CDATA[$request = $smcFunc['db_query']('', '
			SELECT
				m.id_msg, IFNULL(mem.real_name, m.poster_name) AS poster_name, m.poster_time, m.id_topic, m.id_member,
				a.id_attach, a.filename, a.file_hash, a.attachment_type, a.size, a.width, a.height, a.downloads, mf.subject, t.id_board
			FROM {db_prefix}attachments AS a]]></search>
		<add><![CDATA[$request = $smcFunc['db_query']('', '
			SELECT
				m.id_msg, IFNULL(mem.real_name, m.poster_name) AS poster_name, m.poster_time, m.id_topic, m.id_member,
				a.id_attach, a.filename, a.s3, a.file_hash, a.attachment_type, a.size, a.width, a.height, a.downloads, mf.subject, t.id_board
			FROM {db_prefix}attachments AS a]]></add>
	</operation>

	<operation>
		<search position="replace"><![CDATA[$result = $smcFunc['db_query']('', '
				SELECT a.id_attach, a.id_folder, a.filename, a.file_hash
				FROM {db_prefix}attachments AS a
					LEFT JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg)
				WHERE a.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND a.id_member = {int:no_member}
					AND a.id_msg != {int:no_msg}
					AND m.id_msg IS NULL',
				array(
					'no_member' => 0,
					'no_msg' => 0,
					'substep' => $_GET['substep'],
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($result))
			{
				$to_remove[] = $row['id_attach'];
				$context['repair_errors']['attachment_no_msg']++;

				// If we are repairing remove the file from disk now.
				if ($fix_errors && in_array('attachment_no_msg', $to_fix))
				{
					$filename = getAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);
					@unlink($filename);
				}
			}]]></search>
		<add><![CDATA[$result = $smcFunc['db_query']('', '
				SELECT a.id_attach, a.id_folder, a.filename, a.file_hash, a.s3
				FROM {db_prefix}attachments AS a
					LEFT JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg)
				WHERE a.id_attach BETWEEN {int:substep} AND {int:substep} + 499
					AND a.id_member = {int:no_member}
					AND a.id_msg != {int:no_msg}
					AND m.id_msg IS NULL',
				array(
					'no_member' => 0,
					'no_msg' => 0,
					'substep' => $_GET['substep'],
				)
			);
			while ($row = $smcFunc['db_fetch_assoc']($result))
			{
				$to_remove[] = $row['id_attach'];
				$context['repair_errors']['attachment_no_msg']++;

				// If we are repairing remove the file from disk now.
				if ($fix_errors && in_array('attachment_no_msg', $to_fix))
				{
					$filename = getAttachmentFilename($row['filename'], $row['id_attach'], $row['id_folder'], false, $row['file_hash']);
					// s3 check
					if (empty($row['s3']))
						@unlink($filename);
					else
					{
						$s3filename = 	$row['file_hash'];
						if (empty($s3filename))
							$s3filename = $row['filename'];

						DeleteS3File($s3filename);
					}
				}
			}]]></add>
	</operation>



</file>


<file name="$sourcedir/Display.php">
	<operation>
		<search position="replace"><![CDATA[$request = $smcFunc['db_query']('', '
			SELECT id_folder, filename, file_hash, fileext, id_attach, attachment_type, mime_type, approved, id_member
			FROM {db_prefix}attachments
			WHERE id_attach = {int:id_attach}
				AND id_member > {int:blank_id_member}
			LIMIT 1',
			array(
				'id_attach' => $_REQUEST['attach'],
				'blank_id_member' => 0,
			)
		);
		$_REQUEST['image'] = true;
	}
	// This is just a regular attachment...
	else
	{
		// This checks only the current board for $board/$topic's permissions.
		isAllowedTo('view_attachments');

		// Make sure this attachment is on this board.
		// NOTE: We must verify that $topic is the attachment's topic, or else the permission check above is broken.
		$request = $smcFunc['db_query']('', '
			SELECT a.id_folder, a.filename, a.file_hash, a.fileext, a.id_attach, a.attachment_type, a.mime_type, a.approved, m.id_member
			FROM {db_prefix}attachments AS a
				INNER JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg AND m.id_topic = {int:current_topic})
				INNER JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board AND {query_see_board})
			WHERE a.id_attach = {int:attach}
			LIMIT 1',
			array(
				'attach' => $_REQUEST['attach'],
				'current_topic' => $topic,
			)
		);
	}
	if ($smcFunc['db_num_rows']($request) == 0)
		fatal_lang_error('no_access', false);
	list ($id_folder, $real_filename, $file_hash, $file_ext, $id_attach, $attachment_type, $mime_type, $is_approved, $id_member) = $smcFunc['db_fetch_row']($request);
	$smcFunc['db_free_result']($request);]]></search>
		<add><![CDATA[$request = $smcFunc['db_query']('', '
			SELECT id_folder, s3, filename, file_hash, fileext, id_attach, attachment_type, mime_type, approved, id_member
			FROM {db_prefix}attachments
			WHERE id_attach = {int:id_attach}
				AND id_member > {int:blank_id_member}
			LIMIT 1',
			array(
				'id_attach' => $_REQUEST['attach'],
				'blank_id_member' => 0,
			)
		);
		$_REQUEST['image'] = true;
	}
	// This is just a regular attachment...
	else
	{
		// This checks only the current board for $board/$topic's permissions.
		isAllowedTo('view_attachments');

		// Make sure this attachment is on this board.
		// NOTE: We must verify that $topic is the attachment's topic, or else the permission check above is broken.
		$request = $smcFunc['db_query']('', '
			SELECT a.id_folder, a.s3, a.filename, a.file_hash, a.fileext, a.id_attach, a.attachment_type, a.mime_type, a.approved, m.id_member
			FROM {db_prefix}attachments AS a
				INNER JOIN {db_prefix}messages AS m ON (m.id_msg = a.id_msg AND m.id_topic = {int:current_topic})
				INNER JOIN {db_prefix}boards AS b ON (b.id_board = m.id_board AND {query_see_board})
			WHERE a.id_attach = {int:attach}
			LIMIT 1',
			array(
				'attach' => $_REQUEST['attach'],
				'current_topic' => $topic,
			)
		);
	}
	if ($smcFunc['db_num_rows']($request) == 0)
		fatal_lang_error('no_access', false);
	list ($id_folder, $s3, $real_filename, $file_hash, $file_ext, $id_attach, $attachment_type, $mime_type, $is_approved, $id_member) = $smcFunc['db_fetch_row']($request);
	$smcFunc['db_free_result']($request);]]></add>
	</operation>

	<operation>
		<search position="replace"><![CDATA[$filename = getAttachmentFilename($real_filename, $_REQUEST['attach'], $id_folder, false, $file_hash);]]></search>
		<add><![CDATA[$filename = getAttachmentFilename($real_filename, $_REQUEST['attach'], $id_folder, false, $file_hash);

			// S3 System SMFHacks.com

			// Check if not doing s3 thumbnails
			if (empty($modSettings['s3_thumbnails']) && $attachment_type == 3)
			{
				$s3 = 0;
			}

			if ($s3 == 1)
			{

				ob_end_clean();

				$is_image = 0;
				if (isset($_REQUEST['image']))
					$is_image = 1;

				$s3filename = 	$file_hash;
				if (empty($s3filename))
					$s3filename = $real_filename;

				header("Location: " . S3GetSignedUrl($s3filename,$real_filename,$is_image));

				obExit(false);

				exit;

			}

			// END S3 System SMFHacks.com


]]></add>
	</operation>
</file>

<file name="$sourcedir/Admin.php">
	<operation>
		<search position="replace"><![CDATA[						'profile' => array($txt['custom_profile_shorttitle'], 'enabled' => in_array('cp', $context['admin_features'])),]]></search>
		<add><![CDATA[						'profile' => array($txt['custom_profile_shorttitle'], 'enabled' => in_array('cp', $context['admin_features'])),
						's3' => array($txt['amazon_s3']),
]]></add>
	</operation>
</file>

</modification>